package com.assignment.EmployeeCompany.service;

import com.assignment.EmployeeCompany.entity.Company;
import com.assignment.EmployeeCompany.entity.Employee;
import com.assignment.EmployeeCompany.exception.CompanyNotFoundException;
import com.assignment.EmployeeCompany.exception.CustomException;
import com.assignment.EmployeeCompany.exception.EmployeeNotFoundException;
import com.assignment.EmployeeCompany.repository.CompanyRepository;
import com.assignment.EmployeeCompany.repository.EmployeeRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@SpringBootTest
public class EmployeeTest {
    @Mock
    private EmployeeRepository employeeRepository;
    @Mock
    private CompanyRepository companyRepository;
    @Mock
    private ObjectMapper objectMapper;
    @InjectMocks
    private EmployeeServiceImpl employeeService;


    @BeforeEach
    void setUp() {
    }

    //----------POST-------------
    @Test
    void saveEmployee_WithValidDataAndImage_ShouldSaveEmployee() throws CompanyNotFoundException, IOException {
        Long companyId = 10L;
        String employeeData = "{\"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\",\"company\":{\"compId\":1,\"compName\":\"Company A\"}}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employeeDataObj = Employee.builder().empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employeeDataObj);
        when(employeeRepository.save(employeeDataObj)).thenReturn(employeeDataObj);

        Employee savedEmployee = employeeService.saveEmployee(companyId, employeeData, image);

        assertNotNull(savedEmployee);
        assertEquals(employeeDataObj.getEmpName(), savedEmployee.getEmpName());
        assertEquals(employeeDataObj.getEmpJoiningDate(), savedEmployee.getEmpJoiningDate());
        assertEquals(employeeDataObj.getCompany(), savedEmployee.getCompany());
        assertArrayEquals(image.getBytes(), savedEmployee.getEmpImage());
        verify(employeeRepository, times(1)).save(employeeDataObj);
    }

    @Test
    void saveEmployee_WithIds_WithValidDataAndImage_ShouldSaveEmployeeWithAutoGeneratedId() throws CompanyNotFoundException, IOException {
        Long companyId = 10L;
        Long empId = 1L; // Passed empId
        String employeeData = "{\"empId\": 1, \"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\",\"company\":{\"compId\":1,\"compName\":\"Company A\"}}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employee = Employee.builder().empId(100L).empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employee);
        when(employeeRepository.save(employee)).thenReturn(employee);

        Employee savedEmployee = employeeService.saveEmployee(companyId, employeeData, image);

        assertNotNull(savedEmployee);
        assertEquals(employee.getEmpName(), savedEmployee.getEmpName());
        assertEquals(employee.getEmpJoiningDate(), savedEmployee.getEmpJoiningDate());
        assertEquals(employee.getCompany(), savedEmployee.getCompany());
        assertArrayEquals(image.getBytes(), savedEmployee.getEmpImage());
        verify(employeeRepository, times(1)).save(employee);
    }

    @Test
    void saveEmployee_WithInvalidCompanyId_ShouldThrowCompanyNotFoundException() throws CompanyNotFoundException, IOException {
        Long companyId = 1L;
        String employeeData = "{\"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\",\"company\":{\"compId\":1,\"compName\":\"Company A\"}}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> employeeService.saveEmployee(companyId, employeeData, image));
        verify(employeeRepository, never()).save(any());
    }

    @Test
    void saveEmployee_WithNoImage_ShouldSaveEmployee() throws CompanyNotFoundException, IOException {
        Long companyId = 10L;
        String employeeData = "{\"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\",\"company\":{\"compId\":1,\"compName\":\"Company A\"}}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{});

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employeeDataObj = Employee.builder().empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employeeDataObj);
        when(employeeRepository.save(employeeDataObj)).thenReturn(employeeDataObj);

        Employee savedEmployee = employeeService.saveEmployee(companyId, employeeData, image);

        assertNotNull(savedEmployee);
        assertEquals(employeeDataObj.getEmpName(), savedEmployee.getEmpName());
        assertEquals(employeeDataObj.getEmpJoiningDate(), savedEmployee.getEmpJoiningDate());
        assertEquals(employeeDataObj.getCompany(), savedEmployee.getCompany());
        assertNull(savedEmployee.getEmpImage());

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).save(employeeDataObj);
    }
    //----------GET-------------
    @Test
    void getAllEmployees_WithValidIds_ShouldReturnEmployees() throws CompanyNotFoundException, EmployeeNotFoundException, IOException {
        Long companyId = 10L;
        Company company = Company.builder().compId(companyId).compName("Company A").build();
        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        List<Employee> employees = Arrays.asList(Employee.builder().empId(1L).empName("Ayushi").empJoiningDate(LocalDate.now()).company(company).empImage(image.getBytes()).build(), Employee.builder().empId(2L).empName("Jain").empJoiningDate(LocalDate.now()).company(company).build());
        when(employeeRepository.findByCompany(company)).thenReturn(employees);

        List<Employee> allEmployees = employeeService.getEmployees(companyId);

        assertNotNull(allEmployees);
        assertEquals(2, allEmployees.size());
        assertEquals("Ayushi", allEmployees.get(0).getEmpName());
        assertEquals("Jain", allEmployees.get(1).getEmpName());

        verify(employeeRepository, times(1)).findByCompany(company);
    }

    @Test
    void getAllEmployees_WithInvalidCompanyId_ShouldThrowCompanyNotFoundException() {
        Long companyId = 10L;

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> employeeService.getEmployees(companyId));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, never()).findByCompany(any());
    }

    @Test
    void getEmployee_WithValidIds_ShouldReturnEmployee() throws CompanyNotFoundException, EmployeeNotFoundException, IOException {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});
        Employee employee = Employee.builder().empId(1L).empName("Ayushi").empJoiningDate(LocalDate.now()).company(company).empImage(image.getBytes()).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));

        Employee finalEmployee = employeeService.getEmployeeById(employeeId, companyId);

        assertNotNull(finalEmployee);
        assertEquals(finalEmployee.getEmpName(), employee.getEmpName());
        assertEquals(finalEmployee.getEmpJoiningDate(), employee.getEmpJoiningDate());
        assertEquals(finalEmployee.getCompany(), employee.getCompany());
        assertArrayEquals(image.getBytes(), employee.getEmpImage());

        verify(employeeRepository, times(1)).findById(employeeId);
        verify(companyRepository, times(1)).findById(companyId);
    }

    @Test
    void getEmployee_WithInvalidEmployeeId_ShouldThrowEmployeeNotFoundException() throws CompanyNotFoundException, EmployeeNotFoundException, IOException {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});
        Employee employee = Employee.builder().empId(1L).empName("Ayushi").empJoiningDate(LocalDate.now()).company(company).empImage(image.getBytes()).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.empty());

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.getEmployeeById(employeeId, companyId));

        verify(employeeRepository, times(1)).findById(employeeId);
        verify(companyRepository, times(1)).findById(companyId);
    }

    @Test
    void getEmployee_WithInvalidCompanyId_ShouldThrowCompanyNotFoundException() throws CompanyNotFoundException, EmployeeNotFoundException, IOException {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});
        Employee employee = Employee.builder().empId(1L).empName("Ayushi").empJoiningDate(LocalDate.now()).company(company).empImage(image.getBytes()).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> employeeService.getEmployeeById(employeeId, companyId));

        verify(employeeRepository, never()).findById(employeeId);
        verify(companyRepository, times(1)).findById(companyId);
    }

    @Test
    void getEmployee_WithMismatchedCompany_ShouldThrowEmployeeNotFoundException() throws CompanyNotFoundException, EmployeeNotFoundException, IOException {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company1 = Company.builder().compId(companyId).compName("Company A").build();
        Company company2 = Company.builder().compId(20L).compName("Company B").build();
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});
        Employee employee = Employee.builder().empId(employeeId).empName("Ayushi").company(company1).empImage(image.getBytes()).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company2));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.getEmployeeById(employeeId, companyId));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
    }

    //----------GET - Image -------------
    @Test
    void getEmployeeImageById_WithValidIds_ShouldReturnEmployeeImage() throws EmployeeNotFoundException, CompanyNotFoundException {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        byte[] imageBytes = {1, 2, 3};
        Employee employee = Employee.builder().empId(employeeId).empName("Ayushi Jain").company(company).empImage(imageBytes).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));

        byte[] result = employeeService.getEmployeeImageById(employeeId, companyId);

        assertNotNull(result);
        assertArrayEquals(imageBytes, result);

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
    }

    @Test
    void getEmployeeImageById_WithInvalidCompanyId_ShouldThrowCompanyNotFoundException() {
        Long companyId = 10L;
        Long employeeId = 1L;

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> employeeService.getEmployeeImageById(employeeId, companyId));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, never()).findById(any());
    }

    @Test
    void getEmployeeImageById_WithInvalidEmployeeId_ShouldThrowEmployeeNotFoundException() {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.empty());

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.getEmployeeImageById(employeeId, companyId));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
    }

    @Test
    void getEmployeeImageById_WithMismatchedCompany_ShouldThrowEmployeeNotFoundException() {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company1 = Company.builder().compId(companyId).compName("Company A").build();
        Company company2 = Company.builder().compId(20L).compName("Company B").build();
        byte[] imageBytes = {1, 2, 3}; // Sample image byte array

        Employee employee = Employee.builder().empId(employeeId).empName("Ayushi Jain").company(company1).empImage(imageBytes).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company2));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.getEmployeeImageById(employeeId, companyId));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
    }

    //----------PUT-------------
    @Test
    void updateEmployee_WithValidDataAndImage_ShouldUpdateEmployee() throws CompanyNotFoundException, IOException, EmployeeNotFoundException {
        Long companyId = 10L;
        Long employeeId = 1L;
        String employeeData = "{\"empId\": 1, \"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\"}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employeeDB = Employee.builder().empId(employeeId).empName("ABC Jain").empJoiningDate(LocalDate.now()).company(company).build();
        Employee employeeDataObj = Employee.builder().empId(employeeId).empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company).empImage(image.getBytes()).build();

        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employeeDataObj);
        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employeeDB));
        when(employeeRepository.save(employeeDB)).thenReturn(employeeDB);

        Employee updatedEmployee = employeeService.updateEmployee(companyId, employeeData, image);

        assertNotNull(updatedEmployee);
        assertEquals(employeeId, updatedEmployee.getEmpId());
        assertEquals("Ayushi Jain", updatedEmployee.getEmpName());
        assertNotEquals("ABC Jain", updatedEmployee.getEmpName());
        assertEquals(LocalDate.parse("2022-01-01"), updatedEmployee.getEmpJoiningDate());
        assertArrayEquals(image.getBytes(), updatedEmployee.getEmpImage());
        assertEquals(company, updatedEmployee.getCompany());

        verify(objectMapper, times(1)).readValue(employeeData, Employee.class);
        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, times(1)).save(employeeDB);
    }

    // Missing Employee ID
    @Test
    void updateEmployee_WithMissingId_ShouldThrowException() throws CompanyNotFoundException, IOException, EmployeeNotFoundException {
        Long companyId = 10L;
        String employeeData = "{\"empId\": null, \"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\",\"company\":{\"compId\":1,\"compName\":\"Company A\"}}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        Company company = Company.builder().compId(companyId).compName("Company A").build();

        assertThrows(NullPointerException.class, () -> employeeService.updateEmployee(companyId, employeeData, image));

        verify(companyRepository, never()).findById(companyId);
        verify(employeeRepository, never()).save(any());
    }


    @Test
    void updateEmployee_WithInvalidCompanyId_ShouldThrowCompanyNotFoundException() throws CompanyNotFoundException, IOException, EmployeeNotFoundException {
        Long companyId = 10L;
        String employeeData = "{\"empId\": 1, \"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\"}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employeeDataObj = Employee.builder().empId(1L).empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company).empImage(image.getBytes()).build();

        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employeeDataObj);
        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> employeeService.updateEmployee(companyId, employeeData, image));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, never()).findById(any());
        verify(employeeRepository, never()).save(any());
    }

    @Test
    void updateEmployee_WithInvalidEmployeeId_ShouldThrowEmployeeNotFoundException() throws CompanyNotFoundException, IOException, EmployeeNotFoundException {
        Long companyId = 10L;
        Long employeeId = 1L;
        String employeeData = "{\"empId\": 1, \"empName\":\"Ayushi\",\"empJoiningDate\":\"2022-01-01\"}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employeeDataObj = Employee.builder().empId(1L).empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company).empImage(image.getBytes()).build();

        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employeeDataObj);
        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.empty());

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.updateEmployee(companyId, employeeData, image));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, never()).save(any());
    }

    @Test
    void updateEmployee_WithMismatchedCompany_ShouldThrowEmployeeNotFoundException() throws CompanyNotFoundException, IOException, EmployeeNotFoundException {
        Long companyId = 10L;
        Long employeeId = 1L;
        String employeeData = "{\"empId\": 1, \"empName\":\"Ayushi Jain\",\"empJoiningDate\":\"2022-01-01\"}";
        MultipartFile image = new MockMultipartFile("image", new byte[]{1, 2, 3});

        Company company1 = Company.builder().compId(companyId).compName("Company A").build();
        Company company2 = Company.builder().compId(20L).compName("Company B").build();
        Employee employeeDB = Employee.builder().empId(employeeId).empName("ABC Jain").empJoiningDate(LocalDate.now()).company(company1).build();
        Employee employeeDataObj = Employee.builder().empId(1L).empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company1).empImage(image.getBytes()).build();

        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employeeDataObj);
        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company2));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employeeDB));

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.updateEmployee(companyId, employeeData, image));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, never()).save(any());
    }

    @Test
    void updateEmployee_WithInvalidImageContentType_ShouldThrowCustomException() throws CompanyNotFoundException, IOException, EmployeeNotFoundException {
        Long companyId = 10L;
        Long employeeId = 1L;
        String employeeData = "{\"empId\": 1, \"empName\":\"Ayushi\",\"empJoiningDate\":\"2022-01-01\"}";
        MultipartFile image = new MockMultipartFile("image", "test.txt", "text/plain", new byte[]{1, 2, 3});

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employeeDB = Employee.builder().empId(employeeId).empName("Ayushi").empJoiningDate(LocalDate.now()).company(company).build();
        Employee employeeDataObj = Employee.builder().empId(1L).empName("Ayushi Jain").empJoiningDate(LocalDate.parse("2022-01-01")).company(company).empImage(image.getBytes()).build();

        when(objectMapper.readValue(employeeData, Employee.class)).thenReturn(employeeDataObj);
        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employeeDB));

        assertThrows(CustomException.class, () -> employeeService.updateEmployee(companyId, employeeData, image));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, never()).save(any());
    }


    //----------DELETE-------------
    @Test
    void deleteEmployee_WithValidIds_ShouldDeleteEmployee() throws EmployeeNotFoundException, CompanyNotFoundException {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();
        Employee employee = Employee.builder().empId(employeeId).empName("Ayushi Jain").company(company).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));

        employeeService.deleteEmployee(employeeId, companyId);

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, times(1)).deleteById(employeeId);
    }

    @Test
    void deleteEmployee_WithInvalidEmployeeId_ShouldThrowEmployeeNotFoundException() {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.empty());

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.deleteEmployee(employeeId, companyId));

        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, never()).deleteById(any());
    }

    @Test
    void deleteEmployee_WithInvalidCompanyId_ShouldThrowCompanyNotFoundException() {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company = Company.builder().compId(companyId).compName("Company A").build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> employeeService.deleteEmployee(employeeId, companyId));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, never()).findById(any());
        verify(employeeRepository, never()).deleteById(any());
    }

    @Test
    void deleteEmployee_WithMismatchedEmployeeAndCompanyId_ShouldThrowEmployeeNotFoundException() {
        Long companyId = 10L;
        Long employeeId = 1L;

        Company company1 = Company.builder().compId(companyId).compName("Company A").build();
        Company company2 = Company.builder().compId(20L).compName("Company B").build();
        Employee employee = Employee.builder().empId(employeeId).empName("Ayushi Jain").company(company1).build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company2));
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));

        assertThrows(EmployeeNotFoundException.class, () -> employeeService.deleteEmployee(employeeId, companyId));

        verify(companyRepository, times(1)).findById(companyId);
        verify(employeeRepository, times(1)).findById(employeeId);
        verify(employeeRepository, never()).deleteById(any());
    }


}
