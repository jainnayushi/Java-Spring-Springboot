package com.assignment.EmployeeCompany.service;

import com.assignment.EmployeeCompany.entity.Company;
import com.assignment.EmployeeCompany.entity.Employee;
import com.assignment.EmployeeCompany.exception.CompanyNotFoundException;
import com.assignment.EmployeeCompany.exception.CustomException;
import com.assignment.EmployeeCompany.repository.CompanyRepository;
import com.assignment.EmployeeCompany.repository.EmployeeRepository;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.*;

import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@SpringBootTest
public class CompanyTest {
    @Mock
    private EmployeeRepository employeeRepository;

    @Mock
    private CompanyRepository companyRepository;

    @InjectMocks
    private EmployeeServiceImpl employeeService;

    @InjectMocks
    private CompanyServiceImpl companyService;

    @Test
    void saveCompany_ShouldReturnSavedCompany() {
        Company company = Company.builder().compId(1L).compName("Company A").build();

        when(companyRepository.save(company)).thenReturn(company);

        Company savedCompany = companyService.saveCompany(company);

        assertEquals(company, savedCompany);
        verify(companyRepository, times(1)).save(company);
    }

    @Test
    void saveCompany_WithCompId_ShouldSaveCompanyWithAutoGeneratedId() {
        Company company = Company.builder()
                .compId(1L) // Passed compId
                .compName("Company A")
                .build();

        Company savedCompany = Company.builder()
                .compId(100L) // Auto-generated ID
                .compName("Company A")
                .build();

        when(companyRepository.save(company)).thenReturn(savedCompany);

        Company result = companyService.saveCompany(company);

        assertNotNull(result);
        assertEquals(savedCompany.getCompId(), result.getCompId());
        assertEquals(savedCompany.getCompName(), result.getCompName());

        verify(companyRepository, times(1)).save(company);
    }

    //    ------------GET - All ---------------
    @Test
    public void getCompanies_WithExistingCompanies_ShouldReturnListOfCompanies() throws CompanyNotFoundException {
        List<Company> companies = new ArrayList<>();
        companies.add(new Company(1L, "Company A"));
        companies.add(new Company(2L, "Company B"));

        when(companyRepository.findAll()).thenReturn(companies);

        List<Company> result = companyService.getCompanies();

        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals(companies, result);
        verify(companyRepository, times(2)).findAll();
    }

    @Test
    public void getCompanies_WithNoCompanies_ShouldThrowCompanyNotFoundException() {
        when(companyRepository.findAll()).thenReturn(new ArrayList<>());

        assertThrows(CompanyNotFoundException.class, () -> companyService.getCompanies());
        verify(companyRepository, times(1)).findAll();
    }

    //    -------------GET---------------
    @Test
    void getCompanyById_WithValidId_ShouldReturnCompany() throws CompanyNotFoundException {
        Long companyId = 1L;
        Company company = new Company();
        company.setCompId(companyId);

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));

        Company result = companyService.getCompanyById(companyId);

        assertNotNull(result);
        assertEquals(companyId, result.getCompId());

        verify(companyRepository, times(2)).findById(companyId);
    }

    @Test
    void getCompanyById_WithInvalidId_ShouldThrowCompanyNotFoundException() {
        Long companyId = 1L;

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> {
            companyService.getCompanyById(companyId);
        });

        verify(companyRepository, times(1)).findById(companyId);
    }

    //    ------------PUT------------
    @Test
    void updateCompany_WithValidCompany_ShouldUpdateCompany() throws CompanyNotFoundException {
        Long companyId = 1L;
        Company updatedCompany = Company.builder().compId(companyId).compName("New Company Name").build();
        Company existingCompany = Company.builder().compId(companyId).compName("Old Company Name").build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(existingCompany));
        when(companyRepository.save(existingCompany)).thenReturn(updatedCompany);

        Company result = companyService.updateCompany(existingCompany);

        assertNotNull(result);
        assertEquals(updatedCompany.getCompId(), result.getCompId());
        assertEquals(updatedCompany.getCompName(), result.getCompName());

        verify(companyRepository, times(1)).findById(companyId);
        verify(companyRepository, times(1)).save(existingCompany);
    }

    @Test
    void updateCompany_WithNonExistingCompany_ShouldThrowCompanyNotFoundException() {
        Long companyId = 1L;
        Company company = Company.builder().compId(companyId).compName("Company Name").build();

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> companyService.updateCompany(company));

        verify(companyRepository, times(1)).findById(companyId);
        verify(companyRepository, never()).save(any(Company.class));
    }

//    -----------DELETE----------
@Test
void deleteCompany_WithValidCompanyId_ShouldDeleteCompany() throws CompanyNotFoundException, CustomException {
    Long companyId = 1L;
    Company company = new Company();
    company.setCompId(companyId);

    when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
    when(employeeRepository.findByCompany(company)).thenReturn(Collections.emptyList());

    companyService.deleteCompany(companyId);

    verify(companyRepository, times(1)).deleteById(companyId);
}

    @Test
    void deleteCompany_WithNonExistingCompanyId_ShouldThrowCompanyNotFoundException() {
        Long companyId = 1L;

        when(companyRepository.findById(companyId)).thenReturn(Optional.empty());

        assertThrows(CompanyNotFoundException.class, () -> companyService.deleteCompany(companyId));
    }

    @Test
    void deleteCompany_WithUnassociatedEmployees_ShouldThrowCustomException() {
        Long companyId = 1L;
        Company company = new Company();
        company.setCompId(companyId);
        List<Employee> associatedEmployees = Arrays.asList(new Employee(), new Employee());

        when(companyRepository.findById(companyId)).thenReturn(Optional.of(company));
        when(employeeRepository.findByCompany(company)).thenReturn(associatedEmployees);

        assertThrows(CustomException.class, () -> companyService.deleteCompany(companyId));
    }

}
